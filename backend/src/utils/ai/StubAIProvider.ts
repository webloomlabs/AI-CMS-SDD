import { AIProvider, GenerateOptions } from './AIProvider';

export class StubAIProvider implements AIProvider {
  isConfigured(): boolean {
    // Stub is always configured
    return true;
  }

  async generateText(prompt: string, options: GenerateOptions): Promise<string> {
    // Deterministic responses for testing
    const mode = options.mode;

    switch (mode) {
      case 'draft':
        return this.generateDraftStub(prompt);
      
      case 'seo':
        return this.generateSEOStub(prompt);
      
      case 'alt_text':
        return this.generateAltTextStub(prompt);
      
      default:
        throw new Error(`Unknown mode: ${mode}`);
    }
  }

  private generateDraftStub(prompt: string): string {
    // Extract topic from prompt for deterministic response
    const topic = this.extractTopic(prompt);
    
    return `[STUB DRAFT]

This is a stub-generated article about ${topic}.

## Introduction

This content is generated by the stub AI provider for testing purposes. In production, this would be replaced by actual AI-generated content from providers like Google Gemini.

## Main Content

The stub provider generates deterministic responses based on the input prompt. This ensures consistent behavior during testing and development.

## Conclusion

Replace AI_PROVIDER with 'gemini' and set GEMINI_API_KEY to use real AI generation.

---
Word count: ~100 words
Generated by: StubAIProvider`;
  }

  private generateSEOStub(prompt: string): string {
    // Extract title from "Title: X" pattern
    const titleMatch = prompt.match(/Title:\s*([^\n]+)/i);
    const topic = titleMatch ? titleMatch[1].trim() : this.extractTopic(prompt);
    
    return `[STUB SEO] ${topic} - Comprehensive Guide | Meta description for ${topic} article, generated by stub provider | ${topic.toLowerCase()}, guide, tutorial, best practices`;
  }

  private generateAltTextStub(prompt: string): string {
    // Extract filename if present
    const filenameMatch = prompt.match(/([a-zA-Z0-9_-]+\.(jpg|jpeg|png|gif|webp))/i);
    const filename = filenameMatch ? filenameMatch[1] : 'image';
    
    return `[STUB ALT] Image file: ${filename}. Stub-generated alt text for accessibility testing.`;
  }

  private extractTopic(prompt: string): string {
    // Look for "Topic: X" pattern first
    const topicMatch = prompt.match(/Topic:\s*([^\n]+)/i);
    if (topicMatch) {
      return topicMatch[1].trim();
    }

    // Look for "about X" pattern
    const aboutMatch = prompt.match(/about\s+([^.\n]+)/i);
    if (aboutMatch) {
      return aboutMatch[1].trim();
    }
    
    // Fallback: use first 3-5 words
    const words = prompt.split(/\s+/).slice(0, 5);
    return words.join(' ');
  }
}
