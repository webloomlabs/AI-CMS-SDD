# ================================
# AI-Native CMS Backend Environment Configuration
# ================================
# Copy this file to .env and update with your values
# NEVER commit .env to version control

# ================================
# DATABASE CONFIGURATION
# ================================
# PostgreSQL connection string
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA
# Required: YES
# Example (local): postgresql://postgres:password@localhost:5432/ai_cms?schema=public
# Example (Docker): postgresql://postgres:password@postgres:5432/ai_cms?schema=public
# Example (cloud): postgresql://user:pass@host.provider.com:5432/ai_cms?schema=public&sslmode=require
DATABASE_URL="postgresql://postgres:password@localhost:5432/ai_cms?schema=public"

# ================================
# JWT AUTHENTICATION
# ================================
# Secret key for signing JWT tokens
# Required: YES
# Security: MUST be at least 32 characters, use cryptographically random string
# Generate: openssl rand -base64 32
# Production: MUST change this value!
JWT_SECRET="your-secret-key-change-in-production-min-32-chars"

# Token expiration time
# Required: NO (default: 7d)
# Format: Use time units - s (seconds), m (minutes), h (hours), d (days)
# Examples: "1h", "7d", "30d", "3600s"
JWT_EXPIRES_IN="7d"

# ================================
# SERVER CONFIGURATION
# ================================
# Port number for backend server
# Required: NO (default: 3001)
# Range: 1024-65535
PORT=3001

# Node environment mode
# Required: YES
# Values: development | production | test
# Production: Set to "production" for optimizations and security
NODE_ENV=development

# CORS allowed origin (frontend URL)
# Required: NO (default: http://localhost:3000)
# Production: Set to your frontend domain (e.g., https://yourdomain.com)
# Multiple origins: Not currently supported (modify backend/src/index.ts)
CORS_ORIGIN="http://localhost:3000"

# ================================
# AI PROVIDER CONFIGURATION
# ================================
# AI provider to use for content generation
# Required: NO (default: stub)
# Values: gemini | stub
# - gemini: Google Gemini API (requires GEMINI_API_KEY)
# - stub: Mock provider for testing (returns placeholder content)
AI_PROVIDER="stub"

# Google Gemini API key
# Required: Only if AI_PROVIDER=gemini
# Get key: https://makersuite.google.com/app/apikey
# Free tier: 60 requests per minute
GEMINI_API_KEY=""

# ================================
# FILE UPLOAD & STORAGE
# ================================
# Storage provider for uploaded files
# Required: NO (default: local)
# Values: local | s3 | cloudinary
# - local: Store files in local filesystem (uploads directory)
# - s3: Amazon S3 (requires S3_* configuration)
# - cloudinary: Cloudinary service (requires CLOUDINARY_URL)
STORAGE_PROVIDER="local"

# Local storage upload directory
# Required: Only if STORAGE_PROVIDER=local
# Path: Relative to backend root or absolute path
# Default: uploads
# Production: Ensure directory is writable (chmod 755)
UPLOAD_PATH="uploads"

# Maximum file upload size in bytes
# Required: NO (default: 10485760 = 10MB)
# Common values:
# - 5MB: 5242880
# - 10MB: 10485760
# - 50MB: 52428800
# Note: nginx also has client_max_body_size limit
MAX_FILE_SIZE=10485760

# Amazon S3 configuration (if STORAGE_PROVIDER=s3)
# Required: Only if using S3
# S3_BUCKET: Your S3 bucket name
# S3_REGION: AWS region (e.g., us-east-1)
# S3_ACCESS_KEY_ID: AWS access key
# S3_SECRET_ACCESS_KEY: AWS secret key
S3_BUCKET=""
S3_REGION=""
S3_ACCESS_KEY_ID=""
S3_SECRET_ACCESS_KEY=""

# Cloudinary configuration (if STORAGE_PROVIDER=cloudinary)
# Required: Only if using Cloudinary
# Format: cloudinary://API_KEY:API_SECRET@CLOUD_NAME
# Get from: https://cloudinary.com/console
CLOUDINARY_URL=""

# ================================
# DATABASE SEEDING
# ================================
# Whether to seed database with initial admin user on startup
# Required: NO (default: false)
# Values: true | false
# Production: Should be "false" after initial setup
# Note: Only runs if database is empty (no users exist)
SEED_DATABASE="false"

# ================================
# LOGGING & DEBUGGING
# ================================
# Log level for application logging
# Required: NO (default: info)
# Values: error | warn | info | debug | trace
# Production: "info" or "warn"
# Development: "debug"
LOG_LEVEL="info"

# Enable Prisma query logging
# Required: NO (default: false)
# Values: true | false
# Note: Can also use DEBUG=prisma:query environment variable
PRISMA_LOG_QUERIES="false"

# ================================
# SECURITY SETTINGS (Production)
# ================================
# Rate limiting (requests per IP per window)
# Uncomment and configure for production
# RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
# RATE_LIMIT_MAX_REQUESTS=100  # Max requests per window

# Cookie security (if using cookies)
# COOKIE_SECURE=true  # Only send over HTTPS
# COOKIE_SAME_SITE=strict  # CSRF protection

# ================================
# PRODUCTION CHECKLIST
# ================================
# Before deploying to production, ensure:
# [ ] JWT_SECRET is changed to a strong random value (32+ chars)
# [ ] DATABASE_URL points to production database
# [ ] NODE_ENV is set to "production"
# [ ] GEMINI_API_KEY is set (if using AI features)
# [ ] CORS_ORIGIN is set to production frontend URL
# [ ] SEED_DATABASE is set to "false"
# [ ] Database backups are configured
# [ ] SSL/TLS certificates are configured
# [ ] Firewall rules are configured
# [ ] npm audit has been run and vulnerabilities fixed

# ================================
# DOCKER-SPECIFIC VARIABLES
# ================================
# If using Docker, these are typically set in docker-compose.yml or .env.docker
# - DB_USER: Database username (default: postgres)
# - DB_PASSWORD: Database password
# - DB_NAME: Database name (default: ai_cms)
# - DB_HOST: Database host (default: postgres for Docker network)
# - DB_PORT: Database port (default: 5432)

# ================================
# ADDITIONAL NOTES
# ================================
# 1. Environment variables can be overridden by system environment
# 2. .env file is loaded by dotenv package
# 3. Boolean values should be strings: "true" or "false"
# 4. Numeric values can be strings or numbers
# 5. Empty strings are treated as undefined for optional variables
# 6. Comments starting with # are ignored
# 7. No spaces around = sign
# 8. Use quotes for values with special characters

# For more information, see:
# - docs/DEPLOYMENT.md - Production deployment guide
# - docs/API.md - API documentation
# - docs/TROUBLESHOOTING.md - Common issues and solutions
